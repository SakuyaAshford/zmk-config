/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        // Custom mod-tap with better settings for fast typing
        // This replaces the default &mt behavior with more tap-friendly settings
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <280>;                    // Increased from 150ms to 280ms - longer hold time needed
            quick-tap-ms = <175>;                       // Added quick-tap to prevent accidental holds on fast typing
            flavor = "balanced";                        // Wait for other key release before deciding
            bindings = <&kp>, <&kp>;
            require-prior-idle-ms = <150>;              // Helps prevent accidental holds when typing fast
        };

        // Enhanced shift behavior that works better for quick typing
        quick_shift: quick_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;                    // Shorter hold time for shift
            quick-tap-ms = <200>;                       // Quick repeat for fast shift usage
            flavor = "hold-preferred";                  // Prefer hold for shift to ensure uppercase works
            bindings = <&kp>, <&kp>;
            retro-tap;                                  // Enable retro-tap for better shift behavior
        };

        // Mod-morph behaviors: Change output based on whether shift is held
        // Format: bindings = <normal_output>, <shifted_output>;
        
        shifted_apos: shifted_apos {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFTED_APOS";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp UNDER>;          // ' when normal, _ when shifted
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shifted_comma: shifted_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFTED_COMMA";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QMARK>;        // , when normal, ? when shifted
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shifted_period: shifted_period {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFTED_PERIOD";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp GT>;          // . when normal, > when shifted
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shifted_minus: shifted_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFTED_MINUS";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp DQT>;          // - when normal, " when shifted
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shifted_slash: shifted_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFTED_SLASH";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp LT>;            // / when normal, < when shifted
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        main {
            // ------------------------------------------------------------------------------------------------------------
            // |  `    |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |  [ ]  |
            // |       |  B  |  L  |  D   |  W   |  Z   |                   |  '   |  F    |  O    |  U   |   J   |  ; =  |
            // |       |  N  |  R  |  T   |  S   |  G   |                   |  Y   |  H    |  A    |  E   |   I   |   ,   |
            // |       |  Q  |  X  |  M   |  C   |  V   |   "["  |  |  "]"  |  K   |  P    |  .    |  -   |   /   |       |
            //                     |      |      |      |  SPACE |  | ENTER |      |       |       |

            bindings = <
&kp GRAVE                              &kp N1   &kp N2                             &kp N3                     &kp N4                        &kp N5                               &kp N6         &kp N7                          &kp N8                      &kp N9                                &kp N0          &trans
&caps_word                             &kp B    &hm LC(LEFT_SHIFT) L               &hm LEFT_ALT D             &hm LCTRL W                   &kp Z                                &shifted_apos  &hm RCTRL F                   &hm RIGHT_ALT O           &hm RC(RIGHT_SHIFT) U               &kp J           &kp SEMICOLON
&quick_shift LEFT_SHIFT NON_US_BACKSLASH  &lt 4 N  &lt 3 R                           &lt 1 T                    &lt 2 S                       &kp G                                &kp Y          &lt 2 H                         &lt 1 A                     &lt 3 E                               &lt 4 I         &shifted_comma
&kp LEFT_ALT                           &kp Q    &kp X                             &kp M                      &kp C                         &kp V         &kp LBKT     &kp RBKT  &kp K          &kp P                           &shifted_period             &shifted_minus                        &shifted_slash  &kp EQUAL
                                                                                &trans                     &trans                        &kp LEFT_WIN  &kp SPACE    &kp RET   &trans         &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        num+nav {
            bindings = <
&trans  &kp F1        &kp F2                 &kp F3                 &kp F4                     &kp F5                              &kp F6         &kp F7          &kp F8                  &kp F9             &kp F10            &kp F11
&trans  &kp ESC       &hm LEFT_GUI NUMBER_7  &hm LEFT_ALT NUMBER_8  &hm LEFT_CONTROL NUMBER_9  &kp PLUS                            &kp PAGE_UP    &hm RCTRL HOME  &hm RIGHT_ALT UP_ARROW  &hm RIGHT_GUI END  &kp DEL            &kp F12
&trans  &kp TAB       &kp NUMBER_4           &kp NUMBER_5           &kp NUMBER_6               &kp MINUS                           &kp PAGE_DOWN  &kp LEFT_ARROW  &kp DOWN                &kp RIGHT          &kp LC(BACKSPACE)  &trans
&trans  &kp NUMBER_0  &kp NUMBER_1           &kp NUMBER_2           &kp NUMBER_3               &kp PERIOD  &trans       &trans     &kp H          &kp J           &kp K                   &kp L              &kp ENTER          &trans
                                             &trans                 &trans                     &trans      &kp SPACE    &kp ENTER  &trans         &trans          &trans
            >;
        };

        sym {
            bindings = <
&kp TILDE  &kp EXCL      &kp AT                        &kp HASH                     &kp DLLR                       &kp PRCNT                             &kp CARET             &kp AMPS                            &kp ASTRK                        &kp LPAR   &kp RPAR       &kp LBRC
&trans     &kp ESCAPE    &hm LEFT_WIN AMPERSAND        &hm LEFT_ALT ASTERISK        &hm LCTRL SEMICOLON            &kp COLON                             &hm RCTRL PIPE        &hm RIGHT_ALT LEFT_BRACE            &hm RIGHT_GUI RIGHT_BRACE        &kp SQT    &kp DELETE     &kp RBRC
&trans     &kp TAB       &kp DOLLAR                    &kp PERCENT                  &kp CARET                      &kp UNDERSCORE                        &kp EQUAL             &kp LEFT_PARENTHESIS                &kp RIGHT_PARENTHESIS            &kp TILDE  &kp BACKSPACE  &kp PIPE
&trans     &kp CAPSLOCK  &kp EXCLAMATION               &kp AT_SIGN                  &kp HASH                       &kp CAPS        &trans       &trans   &kp NON_US_BACKSLASH  &kp LEFT_BRACKET                    &kp RIGHT_BRACKET                &kp SLASH  &kp ENTER      &trans
                                                       &trans                       &trans                         &trans          &kp SPACE    &kp RET  &trans                &trans                              &trans
            >;
        };

        fun {
            bindings = <
&trans  &trans   &trans  &trans  &trans  &trans                        &trans          &trans          &trans          &trans           &trans     &trans
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &trans                        &msc SCRL_UP    &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &kp LC(Y)  &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &trans                        &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp LC(Z)  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &trans  &trans       &trans   &kp LC(C)       &kp LC(V)       &kp LC(X)       &mkp LCLK        &mkp RCLK  &trans
                         &trans  &trans  &trans  &kp SPACE    &kp RET  &trans          &trans          &trans
            >;
        };

        misc {
            bindings = <
&trans          &trans            &trans            &trans            &trans            &trans                                  &trans            &trans            &trans     &trans     &trans  &trans
&trans          &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)  &kp LG(NUMBER_5)                        &kp LG(NUMBER_6)  &kp LG(NUMBER_7)  &kp LG(K)  &trans     &trans  &trans
&bootloader     &trans            &bt BT_SEL 3      &bt BT_SEL 0      &trans            &trans                                  &kp LC(F)         &kp LG(H)         &kp LG(J)  &kp LG(L)  &trans  &bootloader
&bt BT_CLR_ALL  &bt BT_CLR        &bt BT_SEL 0      &bt BT_SEL 1      &bt BT_SEL 2      &trans            &trans       &trans   &kp LC(LS(TAB))   &kp LC(TAB)       &trans     &trans     &trans  &trans
                                                    &trans            &trans            &trans            &kp SPACE    &kp RET  &trans            &trans            &trans
            >;
        };
    };
};
